{"version":3,"sources":["utils/fetchClient.ts","components/UsersContext.tsx","api/users.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","api/comments.ts","components/UserSelector.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","UserContext","React","createContext","UsersProvider","children","useState","users","setUsers","useEffect","Provider","value","PostsList","posts","selectedPostId","onSelectedPost","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","addComment","isSubmitting","setIsSubmitting","name","email","setValues","errors","setErrors","handleSubmit","event","a","preventDefault","current","handleChange","target","field","onSubmit","onReset","htmlFor","placeholder","onChange","PostDetails","comments","setComments","isLoaded","setIsLoaded","isError","setIsError","isVisibleForm","setIsVisibleForm","postId","catch","finally","newComment","currentComments","deleteComment","deleteCommentId","filter","comment","length","href","UserSelector","selectedUser","onChangeUser","useContext","isExpanded","setIsExpanded","handleDocumentClick","document","addEventListener","removeEventListener","role","user","App","setPosts","setUser","selectedPost","setSelectedPost","loadUserPosts","userId","getUserPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3482cc19.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UsersProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId?: number,\n  onSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  onSelectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">\n              {post.id}\n            </td>\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  {\n                    'is-light': post.id !== selectedPostId,\n                  },\n                )}\n                onClick={() => {\n                  onSelectedPost(post.id === selectedPostId ? null : post);\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  addComment: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    await addComment({ name, email, body });\n\n    setIsSubmitting(false);\n    setValues(current => ({ ...current, body: '' }));\n  };\n\n  const handleReset = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.name },\n            )}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.email },\n            )}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': errors.body },\n            )}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isSubmitting },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport * as commentsApi from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n\n  const loadComments = () => {\n    setIsLoaded(false);\n    setIsError(false);\n    setIsVisibleForm(false);\n\n    commentsApi.getPostComments(post.id)\n      .then(setComments)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoaded(true));\n  };\n\n  useEffect(loadComments, [post.id]);\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await commentsApi.createComment({\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      setComments(\n        currentComments => [...currentComments, newComment],\n      );\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const deleteComment = async (deleteCommentId: number) => {\n    setComments(\n      currentComments => currentComments.filter(\n        comment => comment.id !== deleteCommentId,\n      ),\n    );\n\n    await commentsApi.deleteComment(deleteCommentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${post.id}: ${post.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {post.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {!isLoaded && (\n          <Loader />\n        )}\n\n        {isLoaded && isError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {isLoaded && !isError && comments.length === 0 && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {isLoaded && !isError && comments.length > 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                key={comment.id}\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {isLoaded && !isError && !isVisibleForm && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsVisibleForm(true)}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n\n      {isLoaded && !isError && isVisibleForm && (\n        <NewCommentForm\n          addComment={addComment}\n        />\n      )}\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { UserContext } from './UsersContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUser: User | null;\n  onChangeUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  onChangeUser,\n}) => {\n  const users = useContext(UserContext);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setIsExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [isExpanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isExpanded },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsExpanded(current => !current)}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => onChangeUser(user)}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUserPosts = (userId: number) => {\n    setIsLoaded(false);\n    setIsError(false);\n\n    getUserPosts(userId)\n      .then(setPosts)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoaded(true));\n  };\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (user) {\n      loadUserPosts(user.id);\n    } else {\n      setPosts([]);\n    }\n  }, [user?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={user}\n                  onChangeUser={setUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {user && !isLoaded && (\n                  <Loader />\n                )}\n\n                {user && isLoaded && isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {user && isLoaded && !isError && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {user && isLoaded && !isError && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPost?.id}\n                    onSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\nimport { UsersProvider } from './components/UsersContext';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}